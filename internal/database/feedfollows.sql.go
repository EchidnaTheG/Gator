// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feedfollows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one


WITH inserted_feed_follow AS(
INSERT INTO feed_follows ( id, created_at, updated_at, userid, feedid)
VALUES($1,$2,$3,$4,$5)
RETURNING id, created_at, updated_at, userid, feedid
)
SELECT 
    inserted_feed_follow.id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, inserted_feed_follow.userid, inserted_feed_follow.feedid, feeds.name AS feed_name, users.name AS user_name
FROM inserted_feed_follow
INNER JOIN users
ON inserted_feed_follow.userid=users.id
INNER JOIN feeds
ON inserted_feed_follow.feedid = feeds.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Userid    uuid.UUID
	Feedid    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Userid    uuid.UUID
	Feedid    uuid.UUID
	FeedName  sql.NullString
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Userid,
		arg.Feedid,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Userid,
		&i.Feedid,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many

SELECT id, created_at, updated_at, userid, feedid
FROM feed_follows
WHERE userid = $1
`

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userid uuid.UUID) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Userid,
			&i.Feedid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
